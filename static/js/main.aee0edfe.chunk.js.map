{"version":3,"sources":["Components/PostCard.js","Components/PostAdd.js","Components/PostDelete.js","Components/PostEdit.js","Components/PostView.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["PostCard","props","title","content","dateCreated","id","Card","style","marginBottom","Body","Title","Text","Subtitle","className","Button","variant","size","onClick","HandleViewButton","HandleEditButton","HandleDeleteButton","PostAdd","useState","setTitle","setContent","SystemMessage","setSystemMessage","onSubmit","e","preventDefault","today","Date","newPost","Math","random","toLocaleDateString","HandleSubmit","Form","Group","controlId","Label","Control","type","placeholder","defaultValue","selectedtitle","onChange","target","value","selectedcontent","as","rows","HandleCancel","PostDelete","selectedPostId","PostEdit","updatedPost","PostView","Home","PostAddComponentIsDisplayed","setPostAddComponentIsDisplayed","PostEditComponentIsDisplayed","setPostEditComponentIsDisplayed","PostDeleteComponentIsDisplayed","setPostDeleteComponentIsDisplayed","PostViewComponentIsDisplayed","setPostViewComponentIsDisplayed","setSelectedPostId","selectedPostTitle","setSelectedPostTitle","selectedPostContent","setSelectedPostContent","selectedPostIndex","PostHandleCancel","HideSidebarComponents","posts","setPosts","pageLimit","pageCurrent","setPageCurrent","pageNumbers","length","round","pagesCount","end","start","createPagination","totalPages","activePage","i","push","href","HandleChangePage","aria-label","pager","setPager","createRenderedList","_arr","_start","_end","console","log","slice","map","post","item","find","filter","renderedList","setRenderedList","selectedPage","loadList","_currentPage","useEffect","onKeyDown","searchKeyword","foundItems","x","result","search","arr","z","_pageNumbers","sort","a","b","newPosts","postId","newArr","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PAuDeA,EApDI,SAACC,GAAW,IAEpBC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,QAAQC,EAAmBH,EAAnBG,YAAmBH,EAANI,GA4BnC,OACwB,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,aAAa,SACvB,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACH,EAAA,EAAKI,MAAN,KAAaR,GACb,kBAACI,EAAA,EAAKK,KAAN,KACCR,GAED,kBAACG,EAAA,EAAKM,SAAN,CAAeC,UAAU,mBAAmBT,GAG5C,kBAACU,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,QAAU,YAnCrD,SAACZ,GAGrBJ,EAAMiB,iBAAiBb,GAgC0Da,CAAiBjB,EAAMI,MAA7E,QACP,IACD,kBAACS,EAAA,EAAD,CAAQC,QAAQ,UAAWC,KAAK,KAAKC,QAAU,YAxB9C,SAACZ,GAEtBJ,EAAMkB,iBAAiBd,GAsBoDc,CAAiBlB,EAAMI,MAA9E,QACC,IACD,kBAACS,EAAA,EAAD,CAASC,QAAQ,UAAYC,KAAK,KAAMC,QAAU,YAhC/C,SAACZ,GAExBJ,EAAMmB,mBAAmBf,GA8BqDe,CAAmBnB,EAAMI,MAAnF,aCmDbgB,EA5FC,SAACpB,GAAW,IAAD,EAGGqB,mBAAS,IAHZ,mBAGhBpB,EAHgB,KAGTqB,EAHS,OAIOD,mBAAS,IAJhB,mBAIhBnB,EAJgB,KAIPqB,EAJO,OAKmBF,mBACtC,uBAAGT,UAAU,cAAb,mEANmB,mBAKhBY,EALgB,KAKDC,EALC,KAsDvB,OACI,oCACI,kBAACpB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKG,KAAN,KAEA,wCACHgB,EAID,0BAAME,SA/CO,SAACC,GAIlB,GAFAA,EAAEC,iBAEW,KAAV3B,GAA4B,KAAZC,EACnB,CACI,IAAI2B,EAAQ,IAAIC,KAKVC,EAAU,CACZ3B,GAAM4B,KAAKC,OAAO,KAAS,GAC3BhC,QACAC,UACAC,YAAa0B,EAAMK,sBAGvBlC,EAAMmC,aAAaJ,QAInBN,EAAiB,uBAAGb,UAAU,eAAb,8BA2BT,kBAACwB,EAAA,EAAKC,MAAN,CAAYC,UAAU,MACtB,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAQC,YAAY,QAASC,aAAc3C,EAAM4C,cAAgBC,SA3D1E,SAAClB,GACvBL,EAASK,EAAEmB,OAAOC,WA8DN,kBAACX,EAAA,EAAKC,MAAN,CAAYC,UAAU,MACtB,kBAACF,EAAA,EAAKG,MAAN,kBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcG,aAAc3C,EAAMgD,gBAClCC,GAAG,WAAYJ,SA9DH,SAAClB,GACzBJ,EAAWI,EAAEmB,OAAOC,QA6DuCG,KAAM,KAIrD,kBAACrC,EAAA,EAAD,CAAQC,QAAQ,UAAY2B,KAAK,UAAjC,QACC,IACD,kBAAC5B,EAAA,EAAD,CAAQC,QAAQ,UAAUE,QApCrB,SAACW,GAElBA,EAAEC,iBACF5B,EAAMmD,iBAiCM,eCrCLC,EA/CI,SAACpD,GAehB,OACI,oCACA,kBAACK,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKG,KAAN,KACI,4CAEA,0BAAMkB,SAXG,WAEjB1B,EAAMmC,aAAanC,EAAMqD,kBAUjB,+CACA,uBAAGzC,UAAU,eAAb,sDAIA,4BACA,2BAAG,4CACFZ,EAAM4C,eACP,2BACA,8CACC5C,EAAMgD,iBAEN,kBAACnC,EAAA,EAAD,CAAQC,QAAQ,UAAU2B,KAAK,UAA/B,UACE,IACC,kBAAC5B,EAAA,EAAD,CAAQG,QAjCH,SAACW,GAElBA,EAAEC,iBACF5B,EAAMmD,iBA8BM,eC+CLG,EAlFE,SAACtD,GAAW,IAAD,EAIEqB,mBAAS,IAJX,mBAIjBpB,EAJiB,KAIVqB,EAJU,OAKMD,mBAAS,IALf,mBAKjBnB,EALiB,KAKRqB,EALQ,OAMkBF,mBACtC,uBAAGT,UAAU,cAAb,mEAPoB,mBAMjBY,EANiB,KAMFC,EANE,KAgDxB,OACI,oCACA,kBAACpB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKG,KAAN,KACA,2CACCgB,EAED,kBAACY,EAAA,EAAD,CAAMV,SArCO,SAACC,GAIlB,GAFAA,EAAEC,iBAEW,KAAV3B,GAA4B,KAAZC,EACnB,CACI,IAAIqD,EAAc,CACdnD,GAAKJ,EAAMqD,eACXpD,QACAC,WAEJF,EAAMmC,aAAaoB,QAInB9B,EAAiB,uBAAGb,UAAU,eAAb,8BAwBrB,kBAACwB,EAAA,EAAKC,MAAN,CAAYC,UAAU,MAClB,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAQC,YAAY,QACvCK,MAAO/C,EAAM4C,cAAgBC,SAlDX,SAAClB,GACvBL,EAASK,EAAEmB,OAAOC,WAqDd,kBAACX,EAAA,EAAKC,MAAN,CAAYC,UAAU,MAC9B,kBAACF,EAAA,EAAKG,MAAN,kBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcO,MAAO/C,EAAMgD,gBAC1BC,GAAG,WAAYJ,SArDY,SAAClB,GACzBJ,EAAWI,EAAEmB,OAAOC,QAoDwBG,KAAM,KAI9C,kBAACrC,EAAA,EAAD,CAAQC,QAAQ,UAAY2B,KAAK,UAAjC,QACC,IACD,kBAAC5B,EAAA,EAAD,CAAQC,QAAQ,UAAUE,QAlCb,SAACW,GAElBA,EAAEC,iBACF5B,EAAMmD,iBA+BF,eCvCGK,EAlCE,SAACxD,GAYd,OACI,oCACC,kBAACK,EAAA,EAAD,KACG,kBAACA,EAAA,EAAKG,KAAN,KACA,4BAAKR,EAAM4C,eACX,2BAAI5C,EAAMgD,iBAEV,8BAGA,kBAACnC,EAAA,EAAD,CAAQC,QAAQ,UAAUE,QAnBb,SAACW,GAElBA,EAAEC,iBACF5B,EAAMmD,iBAgBF,cC0jBGM,EA1kBD,WAEV,IAFgB,EAyDqDpC,oBAAS,GAzD9D,mBAyDTqC,EAzDS,KAyDmBC,EAzDnB,OA0DuDtC,oBAAS,GA1DhE,mBA0DTuC,EA1DS,KA0DoBC,EA1DpB,OA2D2DxC,oBAAS,GA3DpE,mBA2DTyC,EA3DS,KA2DsBC,EA3DtB,OA4DwD1C,oBAAS,GA5DjE,mBA4DT2C,EA5DS,KA4DqBC,EA5DrB,OA6D4B5C,qBA7D5B,mBA6DTgC,EA7DS,KA6DOa,EA7DP,OA8DkC7C,qBA9DlC,mBA8DT8C,EA9DS,KA8DUC,EA9DV,OA+DsC/C,qBA/DtC,mBA+DTgD,EA/DS,KA+DYC,EA/DZ,OAgEkCjD,qBAhElC,mBAgETkD,EAhES,KAmOVC,GAnOU,KAmOQ,WACnBC,MA+DCA,EAAwB,WAC1Bd,GAA+B,GAC/BE,GAAgC,GAChCE,GAAkC,GAElCE,GAAgC,IAxSpB,EA8SU5C,mBA5SR,CAAC,CACfjB,GAAK,EACLH,MAAQ,IACRC,QAAU,4BACVC,YAAc,cAChB,CACEC,GAAK,EACLH,MAAQ,IACRC,QAAU,4BACVC,YAAc,cAChB,CACCC,GAAK,EACLH,MAAQ,IACRC,QAAU,4BACVC,YAAc,cAChB,CACEC,GAAK,EACLH,MAAQ,IACRC,QAAU,2BACVC,YAAc,cAChB,CACEC,GAAK,EACLH,MAAQ,IACRC,QAAU,2BACVC,YAAc,cAChB,CACEC,GAAK,EACLH,MAAQ,IACRC,QAAU,2BACVC,YAAc,cAChB,CACEC,GAAK,EACLH,MAAQ,IACRC,QAAU,2BACVC,YAAc,cAChB,CACEC,GAAK,EACLH,MAAQ,IACRC,QAAU,2BACVC,YAAc,cAChB,CACEC,GAAK,EACLH,MAAQ,KACRC,QAAU,2BACVC,YAAc,cAChB,CACEC,GAAK,GACLH,MAAQ,KACRC,QAAU,2BACVC,YAAc,gBAnDD,mBA8STuE,EA9SS,KA8SFC,EA9SE,OA+SItD,mBAAS,GAAtBuD,EA/SS,sBAgTsBvD,mBAAS,GAhT/B,mBAgTTwD,EAhTS,KAgTIC,EAhTJ,KAkTZC,IADcL,EAAMM,OACNhD,KAAKiD,MAAMP,EAAMM,OAASJ,IAlT5B,GAmToBvD,mBAAS0D,IAnT7B,qBAmTTG,GAnTS,gBAoTO7D,mBAASwD,EAAcD,IApT9B,qBAoTTO,GApTS,gBAqTW9D,mBAAS8D,GAAMP,IArT1B,qBAqTTQ,GArTS,MAuTVC,IAvTU,MAuTS,SAACC,EAAWC,GAKjC,IADA,IAAIrC,EAAO,GAJqC,WAKvCsC,GAEFA,IAAID,EAEHrC,EAAKuC,KAAK,wBAAI7E,UAAU,oBACxB,uBAAGA,UAAU,mBAAmB8E,KAAK,IACrC1E,QAAU,kBAAM2E,GAAiBH,KAAOA,KAIxCtC,EAAKuC,KAAK,wBAAI7E,UAAU,aACxB,uBAAGA,UAAU,YAAY8E,KAAK,IAAK1E,QAAU,kBAAO2E,GAAiBH,KAAMA,MAX1EA,EAAI,EAAGA,GAAKF,EAAYE,IAAM,EAA9BA,GAgBT,OACI,yBAAKI,aAAW,OACZ,wBAAIhF,UAAU,4BACbsC,MA/UG,GAuVU7B,mBAASgE,GAAiBH,GAAWL,IAvV/C,qBAuVTgB,GAvVS,MAuVFC,GAvVE,MAyVVC,GAAqB,SAACC,EAAMC,EAAQC,GAItC,OAFAC,QAAQC,IAAIJ,EAAM,QAGfA,EAAKK,MAAMJ,EAAOC,GAAMI,KAAI,SAAAC,GAEtB,OACI,6BACI,kBAAC,EAAD,CACKtG,MAAOsG,EAAKtG,MACZC,QAASqG,EAAKrG,QACdE,GAAImG,EAAKnG,GACTD,YAAaoG,EAAKpG,YAClBgB,mBAAoB,kBArGnB,SAACf,GAExB,IAAIoG,EAAO9B,EAAM+B,MAAK,SAAAD,GAAI,OAAIA,EAAKpG,KAAOA,KAE1CgE,EAAqBoC,EAAKvG,OAC1BqE,EAAuBkC,EAAKtG,SAC5BgE,EAAkBsC,EAAKpG,IACvBqE,IACAV,GAAkC,GA6Fa5C,CAAmBoF,EAAKnG,KACjDa,iBAAkB,kBAzHnB,SAACb,GAGtB8D,EAAkB9D,GAElB,IAAIoG,EAAO9B,EAAM+B,MAAK,SAAAD,GAAI,OAAIA,EAAKpG,KAAOA,KAE1CgE,EAAqBoC,EAAKvG,OAC1BqE,EAAuBkC,EAAKtG,SAC5BgE,EAAkBsC,EAAKpG,IAGvBqE,IAGAR,GAAgC,GA0GahD,CAAiBsF,EAAKnG,KAC7Cc,iBAAkB,kBA3FnB,SAACd,GAGtBqE,IACAP,EAAkB9D,GAGlByD,GAAgC,GAGhCa,EAAMgC,QAAO,SAACF,GACPA,EAAKpG,KAAOA,IAEXgE,EAAqBoC,EAAKvG,OAC1BqE,EAAuBkC,EAAKtG,aA6EUgB,CAAiBqF,EAAKnG,YAzWxD,GAoXwBiB,mBAAS0E,GAAmBrB,EAAMU,GAAMD,KApXhE,qBAoXTwB,GApXS,MAoXKC,GApXL,MAmYNjB,GAAmB,SAACkB,GAElB/B,EAAe+B,IA6BrBC,GAAW,SAACd,EAAKe,GAKf,IAAIb,EAAOa,EAAenC,EAEtBqB,EAASC,EAAOtB,EAEhBG,EAAc/C,KAAKiD,MAAMe,EAAKhB,OAAUJ,GAE5B,IADEoB,EAAKhB,OAAUJ,IAE7BG,GAAe,EACfgC,GAAgB,EAEhBd,GADAC,GAAStB,GACOA,GAGpBgC,GAAgBb,GAAoBC,EAAWC,EAASC,IACrDnB,EAAc,GAEbe,GAAST,GAAiBN,EAAYgC,KAoClD,OA3BAC,qBAAU,WAGEF,GAASpC,EAAO1C,KAAKiD,MAAMP,EAAMM,OAAWJ,MAGrD,CAACF,IAORsC,qBAAU,WAGPF,GAASpC,EAAMG,KAGf,CAACA,IASI,6BACQ,oCAGI,6BAIMnB,EACqF,GAAvF,kBAAC7C,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,QA9PhC,WAEpByD,IACAd,GAA+B,KA2Pf,iBAKR,yBAAK/C,UAAU,OACX,yBAAKA,UAAU,YAKf,kBAACwB,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKC,MAAN,KACA,kBAACD,EAAA,EAAKG,MAAN,eACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,qBAAsBuE,UA5VvD,SAACtF,GAElB,IAAMuF,EAAgBvF,EAAEmB,OAAOC,MAE3BoE,EAAa,GAEjB,GAAqB,KAAlBD,EACJ,CACCxC,EAAM4B,KAAI,SAAAc,GACN,IAAMC,EAAUD,EAAEnH,MAAMqH,OAAOJ,GAG/B,GAFAf,QAAQC,IAAIiB,GAETA,GAAU,EACb,CACG,IAAME,EAAG,sBAAQJ,GAAR,CAAoBC,IAC7BD,EAAU,YAAOI,GAIpB,GADgBH,EAAElH,QAAQoH,OAAOJ,IAClB,GAGS,GADCC,EAAWT,QAAO,SAAAc,GAAC,OAAGA,EAAEpH,KAAOgH,EAAEhH,MAExD,CACE,IAAMmH,EAAG,sBAAQJ,GAAR,CAAoBC,IAC7BD,EAAU,YAAOI,OAYJJ,EAAWnC,OAA9B,IACIyC,EAAezF,KAAKiD,MAAQkC,EAAWnC,OAASJ,GAElDuC,EAAWnC,OAAS,GAGpB4B,GAAgBb,GAAmBoB,EAAW,EAAEvC,IAC7CuC,EAAWnC,OAASJ,EAGnBkB,GAAST,GAAiBoC,EAAa,IAIvC3B,GAAST,GAAiB,EAAE,MAQ5BuB,GAAgB,uBAAGhG,UAAU,eAAb,sBAChBkF,GAAST,GAAiB,EAAE,UAQjCyB,GAASpC,EAAM,OA2RN,kBAACtC,EAAA,EAAKC,MAAN,KACA,kBAACD,EAAA,EAAKG,MAAN,gBAEA,kBAACH,EAAA,EAAKI,QAAN,CAAcS,GAAG,SAASJ,SA1YrB,SAAClB,GAIC,UAAhBA,EAAEmB,OAAOC,MAIR+D,GAASpC,EACJgD,MAAK,SAACC,EAAGC,GACN,OAAID,EAAExH,YAAcyH,EAAEzH,aACd,EACJwH,EAAExH,YAAcyH,EAAEzH,YACf,EACA,KACR,GASP2G,GAASpC,EACJgD,MAAK,SAACC,EAAGC,GACN,OAAID,EAAE1H,MAAQ2H,EAAE3H,OACR,EACJ0H,EAAE1H,MAAQ2H,EAAE3H,MACT,EACA,KACR,KA6WC,iCACI,4BAAQ8C,MAAM,WAAd,SACA,4BAAQA,MAAM,UAAd,mBAgBI4D,GAGJ,6BAEId,IAIR,yBAAKjF,UAAU,qBAGlC8C,EACD,kBAAC,EAAD,CAAavB,aAldoB,SAACJ,GAE1B0C,IACA,IAAMoD,EAAQ,sBAAOnD,GAAP,CAAa3C,IAC3B4C,EAASkD,IA8ciC1E,aAAcqB,IAC9D,GAIDV,EACD,kBAAC,EAAD,CAAaS,kBAAmBA,EAC/BlB,eAAgBA,EAChBT,cAAeuB,EACfnB,gBAAiBqB,EAEhBlC,aAndiC,SAAC2F,GAC5BrD,IACA,IAAMoD,EAAYnD,EAAMgC,QAAO,SAAAH,GAAI,OAAIA,EAAKnG,IAAM0H,KAClDnD,EAASkD,IAidb1E,aAAcqB,IAChB,GAIDZ,EACD,kBAAC,EAAD,CAAcP,eAAgBA,EAC9BT,cAAeuB,EACfnB,gBAAiBqB,EACdlC,aApd8B,SAACoE,GAC1B9B,IAIAC,EAAMgC,QAAO,SAACF,GACPA,EAAKpG,KAAOmG,EAAKnG,KAEjBoG,EAAKvG,MAAQsG,EAAKtG,MAClBuG,EAAKtG,QAAUqG,EAAKrG,YAK3B,IAAM6H,EAAM,YAAOrD,GACnBC,EAASoD,IAscZ5E,aAAcqB,IACjB,GAKDR,EACD,kBAAC,EAAD,CAAaX,eAAgBA,EAC7BT,cAAeuB,EACfnB,gBAAiBqB,EAEZlB,aAAcqB,IACjB,O,YCxjBawD,MARf,WACE,OACE,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.aee0edfe.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card ,Button } from 'react-bootstrap'\r\n\r\n  const PostCard = (props) => {\r\n\r\n    const {title, content,dateCreated, id} = props;\r\n   \r\n    \r\n    const HandleViewButton = (id) =>\r\n    {  \r\n       \r\n         props.HandleViewButton(id);\r\n    }\r\n\r\n\r\n    const HandleDeleteButton = (id) =>\r\n    {  \r\n        props.HandleDeleteButton(id);\r\n    }\r\n\r\n\r\n    const HandleEditButton = (id) =>\r\n    { \r\n        props.HandleEditButton(id); \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (  \r\n                            <Card style={{marginBottom:'20px'}}>\r\n                                <Card.Body>\r\n                                    <Card.Title>{title}</Card.Title>\r\n                                    <Card.Text>\r\n                                    {content}\r\n                                    </Card.Text>\r\n                                    <Card.Subtitle className=\"mb-2 text-muted\">{dateCreated}</Card.Subtitle>\r\n                                   \r\n                                   \r\n                                    <Button variant=\"primary\" size=\"sm\" onClick={ () => { HandleViewButton(props.id); }}>View</Button> \r\n                            {' '}\r\n                            <Button variant=\"primary\"  size=\"sm\" onClick={ () => { HandleEditButton(props.id); }}>Edit</Button> \r\n                            {' '}\r\n                            <Button  variant=\"primary\"   size=\"sm\"  onClick={ () => { HandleDeleteButton(props.id); }}>Delete</Button>\r\n                        \r\n                                </Card.Body>\r\n                            </Card>   \r\n    )\r\n}\r\n\r\n\r\nexport default PostCard","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nimport { Form , Button, Card } from 'react-bootstrap'\r\n\r\n\r\nconst PostAdd = (props) => {\r\n\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [SystemMessage, setSystemMessage] = useState(\r\n        <p className=\"text-muted\">Please supply details below. Note that all fields are required</p> \r\n    )\r\n\r\n    const HandleTitleChange = (e) => {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n    const HandleContentChange = (e) => {\r\n        setContent(e.target.value)\r\n    }\r\n\r\n    const HandleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if(title !== \"\" && content !== \"\")\r\n        {\r\n            var today = new Date();\r\n            // var dd = today.getDate();\r\n            // var mm = today.getMonth()+1; \r\n            // var yyyy = today.getFullYear();\r\n\r\n            const newPost = {\r\n                id :  Math.random(1 * 2020,4),\r\n                title,\r\n                content,\r\n                dateCreated :today.toLocaleDateString()\r\n            }\r\n    \r\n            props.HandleSubmit(newPost); \r\n        }\r\n        else\r\n        {\r\n            setSystemMessage(<p className=\"text-danger\">All fields are required</p>);\r\n        }\r\n      \r\n    }\r\n\r\n\r\n    const HandleCancel = (e) => {\r\n\r\n        e.preventDefault(); \r\n        props.HandleCancel(); \r\n    }\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Body>\r\n\r\n                <h1>Add Post</h1>\r\n            {SystemMessage}\r\n             \r\n \r\n\r\n            <form onSubmit={HandleSubmit}>\r\n  \r\n                    <Form.Group controlId=\"c1\">\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control type=\"text\"  placeholder=\"Title\"  defaultValue={props.selectedtitle}  onChange={HandleTitleChange} />\r\n                    </Form.Group>\r\n                        \r\n\r\n                    <Form.Group controlId=\"2x\">\r\n                    <Form.Label>Content  </Form.Label>\r\n                    <Form.Control defaultValue={props.selectedcontent}   \r\n                    as=\"textarea\"  onChange={HandleContentChange}  rows={3} />\r\n                    </Form.Group>\r\n                        \r\n                    \r\n                    <Button variant=\"primary\"   type=\"submit\" >SAVE</Button>\r\n                    {' '}\r\n                    <Button variant=\"primary\" onClick={HandleCancel}>CANCEL</Button>\r\n\r\n                    </form>\r\n                            \r\n                </Card.Body>\r\n            </Card>\r\n             \r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostAdd","import React from 'react' ;\r\nimport { Card, Button } from 'react-bootstrap'\r\n\r\nconst PostDelete = (props) => {\r\n\r\n\r\n    const HandleCancel = (e) => {\r\n\r\n        e.preventDefault(); \r\n        props.HandleCancel(); \r\n    }\r\n\r\n\r\n    const HandleSubmit = () => { \r\n        \r\n        props.HandleSubmit(props.selectedPostId); \r\n    }\r\n\r\n    return (\r\n        <> \r\n        <Card>\r\n            <Card.Body>\r\n                <h1>Delete Post?</h1>\r\n             \r\n                <form onSubmit={HandleSubmit} >\r\n                <h2> Are you sure? </h2>\r\n                <p className=\"text-danger\">\r\n                    Please ensure that you want to deletem item below.\r\n                </p>\r\n\r\n                <p></p>\r\n                <p><strong>Title : </strong>\r\n                {props.selectedtitle}</p>\r\n                <p>\r\n                <strong>Content : </strong>\r\n                {props.selectedcontent}</p>\r\n                 \r\n                 <Button variant=\"primary\" type=\"submit\">DELETE</Button>\r\n                 { ' ' }\r\n                    <Button onClick={HandleCancel}>CANCEL</Button>\r\n    \r\n                </form>\r\n            \r\n            </Card.Body>\r\n        </Card>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostDelete","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Form , Button, Card } from 'react-bootstrap'\r\n\r\nconst PostEdit = (props) => {\r\n \r\n\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [SystemMessage, setSystemMessage] = useState(\r\n        <p className=\"text-muted\">Please supply details below. Note that all fields are required</p> \r\n    )\r\n\r\n    const HandleTitleChange = (e) => {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n    const HandleContentChange = (e) => {\r\n        setContent(e.target.value)\r\n    }\r\n\r\n    const HandleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n      \r\n        if(title !== \"\" && content !== \"\")\r\n        { \r\n            var updatedPost = {\r\n                id : props.selectedPostId,\r\n                title,\r\n                content\r\n            }\r\n            props.HandleSubmit(updatedPost); \r\n        }\r\n        else\r\n        {\r\n            setSystemMessage(<p className=\"text-danger\">All fields are required</p>);\r\n        }\r\n      \r\n    }\r\n\r\n\r\n    const HandleCancel = (e) => {\r\n\r\n        e.preventDefault(); \r\n        props.HandleCancel(); \r\n    }\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n        <Card>\r\n            <Card.Body>\r\n            <h1>Update Post</h1>\r\n            {SystemMessage}\r\n            \r\n            <Form onSubmit={HandleSubmit}>\r\n  \r\n        <Form.Group controlId=\"c1\">\r\n            <Form.Label>Title</Form.Label>\r\n            <Form.Control type=\"text\"  placeholder=\"Title\"\r\n            value={props.selectedtitle}  onChange={HandleTitleChange} />\r\n        </Form.Group>\r\n                \r\n\r\n            <Form.Group controlId=\"2x\">\r\n    <Form.Label>Content  </Form.Label>\r\n    <Form.Control value={props.selectedcontent}   \r\n     as=\"textarea\"  onChange={HandleContentChange}  rows={3} />\r\n  </Form.Group>\r\n                \r\n             \r\n            <Button variant=\"primary\"   type=\"submit\" >SAVE</Button>\r\n            {' '}\r\n            <Button variant=\"primary\" onClick={HandleCancel}>CANCEL</Button>\r\n\r\n            </Form>\r\n            </Card.Body>\r\n        </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostEdit","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Form , Button , Card } from 'react-bootstrap'\r\n\r\nconst PostView = (props) => {\r\n \r\n \r\n    const HandleCancel = (e) => {\r\n\r\n        e.preventDefault(); \r\n        props.HandleCancel(); \r\n    }\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n         <Card>\r\n            <Card.Body>\r\n            <h1>{props.selectedtitle}</h1>\r\n            <p>{props.selectedcontent}</p> \r\n            \r\n            <form>\r\n  \r\n            \r\n            <Button variant=\"primary\" onClick={HandleCancel}>CLOSE</Button>\r\n\r\n            </form>\r\n\r\n            </Card.Body>\r\n        </Card>\r\n           \r\n          \r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostView","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { Button , Card, Form } from 'react-bootstrap';\r\nimport PostCard from './PostCard'; \r\nimport PostAdd from './PostAdd';\r\nimport PostDelete from './PostDelete';\r\nimport PostEdit from './PostEdit';\r\nimport PostView from './PostView'\r\n\r\n\r\n const Home = () => {\r\n\r\n    const initPosts = [{\r\n        id : 1,\r\n        title : \"a\",\r\n        content : \"apple is a sample content\",\r\n        dateCreated : \"10/10/2020\"\r\n    },{\r\n        id : 2,\r\n        title : \"z\",\r\n        content : \"mango is a sample content\",\r\n        dateCreated : \"10/09/2020\"\r\n    },{\r\n       id : 3,\r\n       title : \"d\",\r\n       content : \"mango is a sample content\",\r\n       dateCreated : \"10/10/2020\"\r\n   },{\r\n       id : 4,\r\n       title : \"r\",\r\n       content : \"this is a sample content\",\r\n       dateCreated : \"10/10/2020\"\r\n   },{\r\n       id : 5,\r\n       title : \"x\",\r\n       content : \"this is a sample content\",\r\n       dateCreated : \"10/10/2020\"\r\n   },{\r\n       id : 6,\r\n       title : \"y\",\r\n       content : \"this is a sample content\",\r\n       dateCreated : \"10/10/2020\"\r\n   },{\r\n       id : 7,\r\n       title : \"z\",\r\n       content : \"this is a sample content\",\r\n       dateCreated : \"10/10/2020\"\r\n   },{\r\n       id : 8,\r\n       title : \"a\",\r\n       content : \"this is a sample content\",\r\n       dateCreated : \"10/10/2020\"\r\n   },{\r\n       id : 9,\r\n       title : \"f9\",\r\n       content : \"this is a sample content\",\r\n       dateCreated : \"10/10/2020\"\r\n   },{\r\n       id : 10,\r\n       title : \"xk\",\r\n       content : \"this is a sample content\",\r\n       dateCreated : \"10/10/2020\"\r\n   }];\r\n\r\n \r\n   \r\n    //UI Specific\r\n    const [PostAddComponentIsDisplayed,setPostAddComponentIsDisplayed] = useState(false);\r\n    const [PostEditComponentIsDisplayed,setPostEditComponentIsDisplayed] = useState(false); \r\n    const [PostDeleteComponentIsDisplayed,setPostDeleteComponentIsDisplayed] = useState(false); \r\n    const [PostViewComponentIsDisplayed, setPostViewComponentIsDisplayed] = useState(false) ;\r\n    const [selectedPostId, setSelectedPostId] = useState();  \r\n    const [selectedPostTitle, setSelectedPostTitle] = useState();  \r\n    const [selectedPostContent, setSelectedPostContent] = useState();   \r\n    const [selectedPostIndex, setSelectedPostIndex] = useState();;\r\n    \r\n\r\n    \r\n   \r\n\r\n\r\n     //ADD Component Functionalities\r\n     const PostAddHandleSubmit = (newPost) => {\r\n       \r\n        HideSidebarComponents();\r\n        const newPosts = [...posts,newPost];\r\n        setPosts(newPosts);    \r\n          \r\n       }\r\n\r\n\r\n    //Delete\r\n    const PostDeleteHandleSubmit = (postId) => {\r\n        HideSidebarComponents(); \r\n        const newPosts =  posts.filter(post => post.id != postId );\r\n        setPosts(newPosts);  \r\n         \r\n    }\r\n\r\n\r\n    //Edit\r\n    const PostEditHandleSubmit = (post) => {\r\n        HideSidebarComponents();\r\n         \r\n\r\n        let gotPost = [];\r\n        posts.filter((item) => {\r\n            if(item.id === post.id)\r\n            {\r\n               item.title = post.title;\r\n               item.content = post.content \r\n            }\r\n          }\r\n         )\r\n \r\n        const newArr = [...posts];\r\n        setPosts(newArr);\r\n\r\n    }\r\n\r\n\r\n    const HandleSortBy = (e) => {\r\n\r\n        \r\n\r\n        if(e.target.value==\"bydate\")\r\n        {\r\n\r\n            \r\n            loadList(posts\r\n                .sort((a, b) => {\r\n                    if (a.dateCreated < b.dateCreated)\r\n                    return -1;\r\n                    if (a.dateCreated > b.dateCreated)\r\n                    return 1;\r\n                    return 0;\r\n                }),1);\r\n\r\n\r\n           // setRenderedList(createRenderedList()    ,0,pageLimit));\r\n  \r\n        }\r\n        else\r\n        {\r\n          \r\n            loadList(posts\r\n                .sort((a, b) => {\r\n                    if (a.title < b.title)\r\n                    return -1;\r\n                    if (a.title > b.title)\r\n                    return 1;\r\n                    return 0;\r\n                }),1);\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    //SEarch\r\n    const HandleSearch = (e) => {\r\n        \r\n        const searchKeyword = e.target.value;\r\n        \r\n        let foundItems = [];\r\n\r\n        if(searchKeyword !== \"\")\r\n       {\r\n        posts.map(x => {  \r\n            const result =  x.title.search(searchKeyword);\r\n            console.log(result);\r\n\r\n            if(result > -1)\r\n            { \r\n               const arr =  [...foundItems, x];\r\n               foundItems = [...arr];\r\n            }\r\n\r\n            const result2 = x.content.search(searchKeyword);\r\n            if(result2 > - 1){\r\n              \r\n              const duplicityCheck = foundItems.filter(z=> z.id === x.id);\r\n              if(duplicityCheck ==  0)\r\n              {\r\n                const arr =  [...foundItems, x];\r\n                foundItems = [...arr];\r\n              }\r\n              \r\n\r\n            }\r\n\r\n\r\n\r\n        })  \r\n         \r\n\r\n       \r\n          const _remainder = foundItems.length % pageLimit;\r\n          let _pageNumbers = Math.round(  foundItems.length / pageLimit);  \r\n         \r\n         if(foundItems.length > 0 )\r\n         {\r\n \r\n            setRenderedList(createRenderedList(foundItems,0,pageLimit)); \r\n            if(foundItems.length > pageLimit)\r\n            {\r\n\r\n                setPager(createPagination(_pageNumbers,1)); \r\n            }\r\n            else\r\n            {\r\n                setPager(createPagination(0,1));\r\n\r\n            }\r\n          }\r\n         else\r\n         {\r\n            \r\n\r\n                setRenderedList(<p className='text-danger'>search not found!</p>);\r\n                setPager(createPagination(0,1)); \r\n         }\r\n         \r\n\r\n       }\r\n       else\r\n       {\r\n           //LOAD DEFAULTS\r\n           loadList(posts,1);\r\n       }\r\n\r\n    }\r\n\r\n    \r\n\r\n    //Generic Cancel Functionality\r\n    const PostHandleCancel= () => { \r\n         HideSidebarComponents();\r\n    }\r\n\r\n    const HandleAddButton = () =>\r\n    { \r\n        HideSidebarComponents();\r\n        setPostAddComponentIsDisplayed(true);\r\n    }\r\n\r\n    \r\n    \r\n    const HandleViewButton = (id) =>\r\n    {  \r\n       \r\n        setSelectedPostId(id);  \r\n\r\n        let item = posts.find(item => item.id === id);\r\n\r\n        setSelectedPostTitle(item.title);\r\n        setSelectedPostContent(item.content);\r\n        setSelectedPostId(item.id);\r\n\r\n\r\n        HideSidebarComponents(); \r\n        \r\n        \r\n        setPostViewComponentIsDisplayed(true);\r\n    }\r\n\r\n\r\n    const HandleDeleteButton = (id) =>\r\n    {  \r\n        let item = posts.find(item => item.id === id);\r\n\r\n        setSelectedPostTitle(item.title);\r\n        setSelectedPostContent(item.content);\r\n        setSelectedPostId(item.id);\r\n        HideSidebarComponents();\r\n        setPostDeleteComponentIsDisplayed(true);\r\n    }\r\n\r\n\r\n    const HandleEditButton = (id) =>\r\n    { \r\n        \r\n        HideSidebarComponents();\r\n        setSelectedPostId(id); \r\n       // setSelectedPostIndex(_index); \r\n        \r\n        setPostEditComponentIsDisplayed(true);\r\n\r\n        let gotPost = [];\r\n        posts.filter((item) => {\r\n            if(item.id === id)\r\n            {\r\n                setSelectedPostTitle(item.title);\r\n                setSelectedPostContent(item.content); \r\n            }\r\n          }\r\n         )\r\n\r\n    }\r\n\r\n    const HideSidebarComponents = () => {\r\n        setPostAddComponentIsDisplayed(false);\r\n        setPostEditComponentIsDisplayed(false);\r\n        setPostDeleteComponentIsDisplayed(false);\r\n        \r\n        setPostViewComponentIsDisplayed(false);\r\n    }\r\n\r\n\r\n    //end UI specific\r\n\r\n    const [posts, setPosts] = useState(initPosts); \r\n    const [pageLimit] = useState(4); \r\n    const [pageCurrent, setPageCurrent] = useState(1);  \r\n    const remainder = posts.length % pageLimit;\r\n    let pageNumbers = Math.round(posts.length / pageLimit);\r\n    const [pagesCount, setPagesCount] = useState(pageNumbers);  \r\n    const [end, setEnd ] = useState(pageCurrent * pageLimit);\r\n    const [start, setStart]  = useState(end - pageLimit);\r\n\r\n    const createPagination = (totalPages,activePage) => {\r\n  \r\n      \r\n\r\n        let rows = [];  \r\n        for (let i = 1; i <= totalPages; i++) { \r\n            \r\n            if(i===activePage)\r\n            {\r\n                rows.push(<li className='page-item active'>\r\n                <a className=\"page-link active\" href=\"#\"  \r\n                onClick={ () => HandleChangePage(i)}  >{i}</a></li>);\r\n            }\r\n            else\r\n            {\r\n                rows.push(<li className='page-item'>\r\n                <a className=\"page-link\" href=\"#\"  onClick={ () =>  HandleChangePage(i)} >{i}</a></li>);\r\n            }\r\n            \r\n        }\r\n\r\n        return (\r\n            <nav aria-label=\"...\">\r\n                <ul className=\"pagination pagination-sm\"> \r\n                {rows}\r\n                </ul>\r\n            </nav>\r\n        ) \r\n\r\n    }\r\n\r\n\r\n    const [pager, setPager] = useState(createPagination(pagesCount,pageCurrent));\r\n    \r\n    const createRenderedList = (_arr, _start, _end) => {\r\n\r\n        console.log(_arr, '_ARR');\r\n \r\n        return (\r\n           _arr.slice(_start,_end).map(post =>\r\n               { \r\n                 return  (\r\n                     <div>\r\n                         <PostCard\r\n                              title={post.title}\r\n                              content={post.content}\r\n                              id={post.id}\r\n                              dateCreated={post.dateCreated}\r\n                              HandleDeleteButton={()=> HandleDeleteButton(post.id)}\r\n                              HandleViewButton={()=> HandleViewButton(post.id)}\r\n                              HandleEditButton={()=>  HandleEditButton(post.id)}\r\n                         />\r\n                     </div> )\r\n              })\r\n        )     \r\n           \r\n   \r\n   }\r\n\r\n   \r\n\r\n    const [renderedList, setRenderedList] = useState(createRenderedList(posts,start,end)); \r\n\r\n  \r\n\r\n\r\n\r\n\r\n   \r\n    \r\n     //END START\r\n     \r\n   \r\n\r\n \r\n          \r\n        const HandleChangePage = (selectedPage) => {  \r\n               \r\n                setPageCurrent(selectedPage); \r\n        }\r\n     \r\n \r\n    const AddData = () => {\r\n        \r\n       \r\n        const post = {\r\n            id : Math.random(28 * pageNumbers * 1000),\r\n            title : pagesCount + 1,\r\n            content : \"this is content \"\r\n        }\r\n\r\n        const updatedArr = [...posts,post];\r\n        setPosts(updatedArr);\r\n         \r\n    }\r\n\r\n    const DeleteData = (id) => {\r\n        var updatedData =  posts.filter(post => post.id !== id ); \r\n        setPosts(updatedData);\r\n\r\n    }\r\n\r\n    const UpdateData = (id) => {\r\n\r\n    } \r\n\r\n\r\n    const loadList = (_arr,_currentPage) => {\r\n        \r\n\r\n               \r\n        \r\n            let _end = _currentPage * pageLimit; \r\n            \r\n            let _start = _end - pageLimit;  \r\n           \r\n            let pageNumbers = Math.round(_arr.length  / pageLimit); \r\n            const remainder = _arr.length  % pageLimit;\r\n            if(remainder ===1 ) {\r\n                pageNumbers += 1;\r\n                _currentPage += 1;\r\n                _end  += pageLimit;\r\n                _start = _end - pageLimit;\r\n            } \r\n\r\n            setRenderedList(createRenderedList( _arr ,     _start,  _end));  \r\n            if(pageNumbers > 1 ){\r\n                \r\n                setPager(createPagination(pageNumbers,_currentPage)); \r\n            \r\n            }\r\n            \r\n    } \r\n   \r\n \r\n\r\n\r\n    useEffect(() => { \r\n           \r\n           \r\n                loadList(posts, Math.round(posts.length  /  pageLimit));\r\n       \r\n        \r\n    }, [posts])\r\n\r\n\r\n        \r\n \r\n\r\n        \r\nuseEffect(() => {  \r\n\r\n   \r\n   loadList(posts,pageCurrent);\r\n        \r\n    \r\n}, [pageCurrent])\r\n\r\n   \r\n\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n                <h1>Post</h1>\r\n  \r\n                    \r\n                    <br></br> \r\n                     \r\n                  \r\n                    {\r\n                        (!PostAddComponentIsDisplayed) ? \r\n                        <Button variant=\"primary\" size=\"md\" onClick={HandleAddButton}>ADD NEW POST </Button> : \"\"\r\n                    }\r\n\r\n                    \r\n           \r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6\">   \r\n\r\n\r\n\r\n                  \r\n                    <Form>\r\n                    <Form.Group >\r\n                    <Form.Label>Search</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"title, description\"  onKeyDown={HandleSearch}  />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group >\r\n                    <Form.Label>Sort By</Form.Label>\r\n                  \r\n                    <Form.Control as=\"select\" onChange={HandleSortBy}>\r\n                        \r\n                    <option></option>\r\n                        <option value=\"bytitle\">Title</option>\r\n                        <option value=\"bydate\">Date Created</option> \r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                   \r\n                    </Form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                            {  \r\n                            renderedList\r\n                        }\r\n\r\n                        <br></br>\r\n                        {\r\n                            pager\r\n                        } \r\n                    </div>\r\n                    \r\n                    <div className=\"col-sm-6 col-md-6\" > \r\n\r\n{ \r\n(PostAddComponentIsDisplayed) ?  \r\n<PostAdd     HandleSubmit={PostAddHandleSubmit}   HandleCancel={PostHandleCancel}     /> \r\n: \"\"\r\n}   \r\n\r\n{ \r\n(PostDeleteComponentIsDisplayed) ?  \r\n<PostDelete  selectedPostIndex={selectedPostIndex}  \r\n selectedPostId={selectedPostId}   \r\n selectedtitle={selectedPostTitle} \r\n selectedcontent={selectedPostContent}   \r\n\r\n  HandleSubmit={PostDeleteHandleSubmit} \r\n    HandleCancel={PostHandleCancel}     /> \r\n: \"\"\r\n}   \r\n\r\n{ \r\n(PostEditComponentIsDisplayed) ?  \r\n<PostEdit     selectedPostId={selectedPostId}   \r\nselectedtitle={selectedPostTitle} \r\nselectedcontent={selectedPostContent}   \r\n   HandleSubmit={PostEditHandleSubmit} \r\n     HandleCancel={PostHandleCancel}     /> \r\n: \"\"\r\n}   \r\n\r\n\r\n{ \r\n(PostViewComponentIsDisplayed) ?  \r\n<PostView    selectedPostId={selectedPostId}   \r\nselectedtitle={selectedPostTitle} \r\nselectedcontent={selectedPostContent}  \r\n\r\n     HandleCancel={PostHandleCancel}     /> \r\n: \"\"\r\n}   \r\n\r\n\r\n</div> \r\n\r\n                </div>\r\n                 \r\n\r\n               \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'; \nimport { Container } from 'react-bootstrap' \nimport Home from './Components/Home'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Container>\n        <Home />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}